test compile
set enable_pcc=true
target aarch64

function %f0(i64) -> i32 {
    mt0 = struct 8 { 0: mt1, 4: mt1 readonly }
    mt1 = primitive i32

block0(v0 ! mem(mt0, 0): i64):  ;; v0 points to an instance of mt0, at offset 0
    v1 = load.i32 v0+0
    v2 = load.i32 v0+4
    v3 = iadd.i32 v1, v2
    return v3
}

function %f1(i64) -> i32 {
    ;; TODO: validate that fields don't overlap, and are within the
    ;; overall size. Make note of future thoughts for enums, tag
    ;; discriminants, etc.
    mt0 = struct 8 { 0: mt3 readonly ! mem(mt1, 0) }
    ;; `u8` here could be a CLIF type or a memtype
    mt1 = static_array mt2 * 0x1_0000_0000
    mt2 = primitive i8
    mt3 = primitive i64

block0(v0 ! mem(mt0, 0): i64):
    v1 ! mem(mt1, 0) = load.i64 v0
    v2 = load.i32 v1+0x1000
    return v2
}
